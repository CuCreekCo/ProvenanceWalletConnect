// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: provenance/metadata/v0/scope.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// RecordInputType indicates if an input is data on or off chain.
enum Scope_RecordInputType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// invalid status
  case unknown // = 0

  /// input is proposed data for recording to the blockchain
  case proposed // = 1

  /// input is a data element referencing an existing scope/record on chain
  case fact // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .proposed
    case 2: self = .fact
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .proposed: return 1
    case .fact: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Scope_RecordInputType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Scope_RecordInputType] = [
    .unknown,
    .proposed,
    .fact,
  ]
}

#endif  // swift(>=4.2)

/// Event references in relation to scope
struct Scope_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupUuid: Types_UUID {
    get {return _groupUuid ?? Types_UUID()}
    set {_groupUuid = newValue}
  }
  /// Returns true if `groupUuid` has been explicitly set.
  var hasGroupUuid: Bool {return self._groupUuid != nil}
  /// Clears the value of `groupUuid`. Subsequent reads from it will return its default value.
  mutating func clearGroupUuid() {self._groupUuid = nil}

  var executionUuid: Types_UUID {
    get {return _executionUuid ?? Types_UUID()}
    set {_executionUuid = newValue}
  }
  /// Returns true if `executionUuid` has been explicitly set.
  var hasExecutionUuid: Bool {return self._executionUuid != nil}
  /// Clears the value of `executionUuid`. Subsequent reads from it will return its default value.
  mutating func clearExecutionUuid() {self._executionUuid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _groupUuid: Types_UUID? = nil
  fileprivate var _executionUuid: Types_UUID? = nil
}

/// A ContractScope is a context that binds multiple p8e working together to create a set of facts managed a defined
/// set of affiliates.
struct Scope_Scope {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique ID for building up ProvenanceReferences
  var uuid: Types_UUID {
    get {return _uuid ?? Types_UUID()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  /// Required parties on this scope.  These are union with any contract specific recital requirements
  var parties: [Contract_Recital] = []

  /// Each contract memorialized in this scope is stored in this list of contract_group.  The list of groups is keyed
  /// as a hashmap based on the contract_spec_ref as a unique key.
  var recordGroup: [Scope_RecordGroup] = []

  /// Last event that resulted in scope changes.
  var lastEvent: Scope_Event {
    get {return _lastEvent ?? Scope_Event()}
    set {_lastEvent = newValue}
  }
  /// Returns true if `lastEvent` has been explicitly set.
  var hasLastEvent: Bool {return self._lastEvent != nil}
  /// Clears the value of `lastEvent`. Subsequent reads from it will return its default value.
  mutating func clearLastEvent() {self._lastEvent = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _uuid: Types_UUID? = nil
  fileprivate var _lastEvent: Scope_Event? = nil
}

/// A collection wrapper around scopes
struct Scope_ScopeCollection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var scopes: [Scope_Scope] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// An record group is created for each contract memorialized against a scope.  This tracks who controls each record for
/// future use.
struct Scope_RecordGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// contract.spec.data_location.hash -- the specific contract specification that was used to create this group.
  var specification: String {
    get {return _storage._specification}
    set {_uniqueStorage()._specification = newValue}
  }

  /// Unique ID for building up ProvenanceReferences.  Set to the value on of group_uuid on the incoming contract ref.
  var groupUuid: Types_UUID {
    get {return _storage._groupUuid ?? Types_UUID()}
    set {_uniqueStorage()._groupUuid = newValue}
  }
  /// Returns true if `groupUuid` has been explicitly set.
  var hasGroupUuid: Bool {return _storage._groupUuid != nil}
  /// Clears the value of `groupUuid`. Subsequent reads from it will return its default value.
  mutating func clearGroupUuid() {_uniqueStorage()._groupUuid = nil}

  /// Identity that is memorializing this contract
  var executor: Types_SigningAndEncryptionPublicKeys {
    get {return _storage._executor ?? Types_SigningAndEncryptionPublicKeys()}
    set {_uniqueStorage()._executor = newValue}
  }
  /// Returns true if `executor` has been explicitly set.
  var hasExecutor: Bool {return _storage._executor != nil}
  /// Clears the value of `executor`. Subsequent reads from it will return its default value.
  mutating func clearExecutor() {_uniqueStorage()._executor = nil}

  /// Set of identities that signed this contract
  var parties: [Contract_Recital] {
    get {return _storage._parties}
    set {_uniqueStorage()._parties = newValue}
  }

  /// Accumulated records (of fact) resulting from Considerations
  var records: [Scope_Record] {
    get {return _storage._records}
    set {_uniqueStorage()._records = newValue}
  }

  /// name of the class associated with this record group specification
  var classname: String {
    get {return _storage._classname}
    set {_uniqueStorage()._classname = newValue}
  }

  /// Created by, updated by, timestamps, version number, and related info.
  var audit: Types_AuditFields {
    get {return _storage._audit ?? Types_AuditFields()}
    set {_uniqueStorage()._audit = newValue}
  }
  /// Returns true if `audit` has been explicitly set.
  var hasAudit: Bool {return _storage._audit != nil}
  /// Clears the value of `audit`. Subsequent reads from it will return its default value.
  mutating func clearAudit() {_uniqueStorage()._audit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// A record (of fact) is attached to an group or each consideration output from a contract.
struct Scope_Record {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ConsiderationSpec.func_name <--> ConsiderationProto.consideration_name (method on the classname below that
  /// generated this)
  var name: String = String()

  /// ConsiderationSpec.outputSpec.spec.resourceLocation.ref.hash (this is the hash of the consideration which generated
  /// the record, see also result_hash)
  var hash: String = String()

  /// ContractSpec.definition.resourceLocation.classname (class that contains the method 'name' as given above)
  var classname: String = String()

  /// ConsiderationProto.inputs for reference with ConsiderationSpec.input_spec for type
  var inputs: [Scope_RecordInput] = []

  /// ConsiderationProto.result.result      (indicates SKIP [not allowed], PASS, or FAIL result)
  var result: Contract_ExecutionResultType = .resultTypeUnknown

  /// ConsiderationProto.result.output.name
  var resultName: String = String()

  /// ConsiderationProto.result.output.hash (the hash of the data output from the consideration)
  var resultHash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Tracks the inputs used with a Consideration to establish the output record.
/// FACT references must have come from the input fact list.
/// For proposed we will only have the hash
struct Scope_RecordInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name value included to link back to the definition spec.
  var name: String = String()

  /// For proposed facts we only have the hash ... for facts this hash maps to something in the input list.
  var hash: String = String()

  /// from proposed fact structure to unmarshal
  var classname: String = String()

  /// Indicates if this input was a recorded fact on chain or just a given hashed input
  var type: Scope_RecordInputType = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "scope"

extension Scope_RecordInputType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RECORD_INPUT_TYPE_UNKNOWN"),
    1: .same(proto: "RECORD_INPUT_TYPE_PROPOSED"),
    2: .same(proto: "RECORD_INPUT_TYPE_FACT"),
  ]
}

extension Scope_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_uuid"),
    2: .standard(proto: "execution_uuid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._groupUuid) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._executionUuid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._groupUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._executionUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Scope_Event, rhs: Scope_Event) -> Bool {
    if lhs._groupUuid != rhs._groupUuid {return false}
    if lhs._executionUuid != rhs._executionUuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Scope_Scope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Scope"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "parties"),
    3: .standard(proto: "record_group"),
    4: .standard(proto: "last_event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._uuid) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.parties) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.recordGroup) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._lastEvent) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.parties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parties, fieldNumber: 2)
    }
    if !self.recordGroup.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.recordGroup, fieldNumber: 3)
    }
    if let v = self._lastEvent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Scope_Scope, rhs: Scope_Scope) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs.parties != rhs.parties {return false}
    if lhs.recordGroup != rhs.recordGroup {return false}
    if lhs._lastEvent != rhs._lastEvent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Scope_ScopeCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ScopeCollection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scopes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.scopes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scopes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.scopes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Scope_ScopeCollection, rhs: Scope_ScopeCollection) -> Bool {
    if lhs.scopes != rhs.scopes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Scope_RecordGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "specification"),
    2: .standard(proto: "group_uuid"),
    3: .same(proto: "executor"),
    4: .same(proto: "parties"),
    5: .same(proto: "records"),
    6: .same(proto: "classname"),
    99: .same(proto: "audit"),
  ]

  fileprivate class _StorageClass {
    var _specification: String = String()
    var _groupUuid: Types_UUID? = nil
    var _executor: Types_SigningAndEncryptionPublicKeys? = nil
    var _parties: [Contract_Recital] = []
    var _records: [Scope_Record] = []
    var _classname: String = String()
    var _audit: Types_AuditFields? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _specification = source._specification
      _groupUuid = source._groupUuid
      _executor = source._executor
      _parties = source._parties
      _records = source._records
      _classname = source._classname
      _audit = source._audit
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._specification) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._groupUuid) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._executor) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._parties) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._records) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._classname) }()
        case 99: try { try decoder.decodeSingularMessageField(value: &_storage._audit) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._specification.isEmpty {
        try visitor.visitSingularStringField(value: _storage._specification, fieldNumber: 1)
      }
      if let v = _storage._groupUuid {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._executor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._parties.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._parties, fieldNumber: 4)
      }
      if !_storage._records.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._records, fieldNumber: 5)
      }
      if !_storage._classname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._classname, fieldNumber: 6)
      }
      if let v = _storage._audit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Scope_RecordGroup, rhs: Scope_RecordGroup) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._specification != rhs_storage._specification {return false}
        if _storage._groupUuid != rhs_storage._groupUuid {return false}
        if _storage._executor != rhs_storage._executor {return false}
        if _storage._parties != rhs_storage._parties {return false}
        if _storage._records != rhs_storage._records {return false}
        if _storage._classname != rhs_storage._classname {return false}
        if _storage._audit != rhs_storage._audit {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Scope_Record: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Record"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "hash"),
    3: .same(proto: "classname"),
    4: .same(proto: "inputs"),
    5: .same(proto: "result"),
    6: .standard(proto: "result_name"),
    7: .standard(proto: "result_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.classname) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.resultName) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.resultHash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 2)
    }
    if !self.classname.isEmpty {
      try visitor.visitSingularStringField(value: self.classname, fieldNumber: 3)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 4)
    }
    if self.result != .resultTypeUnknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 5)
    }
    if !self.resultName.isEmpty {
      try visitor.visitSingularStringField(value: self.resultName, fieldNumber: 6)
    }
    if !self.resultHash.isEmpty {
      try visitor.visitSingularStringField(value: self.resultHash, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Scope_Record, rhs: Scope_Record) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.classname != rhs.classname {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.result != rhs.result {return false}
    if lhs.resultName != rhs.resultName {return false}
    if lhs.resultHash != rhs.resultHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Scope_RecordInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordInput"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "hash"),
    3: .same(proto: "classname"),
    4: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.classname) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 2)
    }
    if !self.classname.isEmpty {
      try visitor.visitSingularStringField(value: self.classname, fieldNumber: 3)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Scope_RecordInput, rhs: Scope_RecordInput) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.classname != rhs.classname {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
