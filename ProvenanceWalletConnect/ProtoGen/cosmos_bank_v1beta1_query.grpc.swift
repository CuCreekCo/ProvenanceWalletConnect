//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/bank/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Cosmos_Bank_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Bank_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func balance(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse>

  func allBalances(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse>

  func totalSupply(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>

  func supplyOf(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse>

  func params(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse>

  func denomMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>

  func denomsMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>
}

extension Cosmos_Bank_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.bank.v1beta1.Query"
  }

  /// Balance queries the balance of a single coin for a single account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Balance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func balance(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.bank.v1beta1.Query/Balance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  /// AllBalances queries the balance of all coins for a single account.
  ///
  /// - Parameters:
  ///   - request: Request to send to AllBalances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allBalances(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.bank.v1beta1.Query/AllBalances",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllBalancesInterceptors() ?? []
    )
  }

  /// TotalSupply queries the total supply of all coins.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalSupply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalSupply(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.bank.v1beta1.Query/TotalSupply",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? []
    )
  }

  /// SupplyOf queries the supply of a single coin.
  ///
  /// - Parameters:
  ///   - request: Request to send to SupplyOf.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supplyOf(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.bank.v1beta1.Query/SupplyOf",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyOfInterceptors() ?? []
    )
  }

  /// Params queries the parameters of x/bank module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.bank.v1beta1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// DenomsMetadata queries the client metadata of a given coin denomination.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.bank.v1beta1.Query/DenomMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomMetadataInterceptors() ?? []
    )
  }

  /// DenomsMetadata queries the client metadata for all registered coin denominations.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomsMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomsMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.bank.v1beta1.Query/DenomsMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsMetadataInterceptors() ?? []
    )
  }
}

internal protocol Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'balance'.
  func makeBalanceInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'allBalances'.
  func makeAllBalancesInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse>]

  /// - Returns: Interceptors to use when invoking 'totalSupply'.
  func makeTotalSupplyInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'supplyOf'.
  func makeSupplyOfInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'denomMetadata'.
  func makeDenomMetadataInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'denomsMetadata'.
  func makeDenomsMetadataInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>]
}

internal final class Cosmos_Bank_V1beta1_QueryClient: Cosmos_Bank_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.bank.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

