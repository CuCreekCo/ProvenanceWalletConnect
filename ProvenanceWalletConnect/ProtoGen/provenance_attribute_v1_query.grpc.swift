//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: provenance/attribute/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service for attribute module.
///
/// Usage: instantiate `Provenance_Attribute_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Provenance_Attribute_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Provenance_Attribute_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Provenance_Attribute_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Attribute_V1_QueryParamsRequest, Provenance_Attribute_V1_QueryParamsResponse>

  func attribute(
    _ request: Provenance_Attribute_V1_QueryAttributeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Attribute_V1_QueryAttributeRequest, Provenance_Attribute_V1_QueryAttributeResponse>

  func attributes(
    _ request: Provenance_Attribute_V1_QueryAttributesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Attribute_V1_QueryAttributesRequest, Provenance_Attribute_V1_QueryAttributesResponse>

  func scan(
    _ request: Provenance_Attribute_V1_QueryScanRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Attribute_V1_QueryScanRequest, Provenance_Attribute_V1_QueryScanResponse>
}

extension Provenance_Attribute_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "provenance.attribute.v1.Query"
  }

  /// Params queries params of the attribute module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Provenance_Attribute_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Attribute_V1_QueryParamsRequest, Provenance_Attribute_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.attribute.v1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Attribute queries attributes on a given account (address) for one (or more) with the given name
  ///
  /// - Parameters:
  ///   - request: Request to send to Attribute.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func attribute(
    _ request: Provenance_Attribute_V1_QueryAttributeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Attribute_V1_QueryAttributeRequest, Provenance_Attribute_V1_QueryAttributeResponse> {
    return self.makeUnaryCall(
      path: "/provenance.attribute.v1.Query/Attribute",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAttributeInterceptors() ?? []
    )
  }

  /// Attributes queries attributes on a given account (address) for any defined attributes
  ///
  /// - Parameters:
  ///   - request: Request to send to Attributes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func attributes(
    _ request: Provenance_Attribute_V1_QueryAttributesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Attribute_V1_QueryAttributesRequest, Provenance_Attribute_V1_QueryAttributesResponse> {
    return self.makeUnaryCall(
      path: "/provenance.attribute.v1.Query/Attributes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAttributesInterceptors() ?? []
    )
  }

  /// Scan queries attributes on a given account (address) for any that match the provided suffix
  ///
  /// - Parameters:
  ///   - request: Request to send to Scan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scan(
    _ request: Provenance_Attribute_V1_QueryScanRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Attribute_V1_QueryScanRequest, Provenance_Attribute_V1_QueryScanResponse> {
    return self.makeUnaryCall(
      path: "/provenance.attribute.v1.Query/Scan",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScanInterceptors() ?? []
    )
  }
}

internal protocol Provenance_Attribute_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Provenance_Attribute_V1_QueryParamsRequest, Provenance_Attribute_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'attribute'.
  func makeAttributeInterceptors() -> [ClientInterceptor<Provenance_Attribute_V1_QueryAttributeRequest, Provenance_Attribute_V1_QueryAttributeResponse>]

  /// - Returns: Interceptors to use when invoking 'attributes'.
  func makeAttributesInterceptors() -> [ClientInterceptor<Provenance_Attribute_V1_QueryAttributesRequest, Provenance_Attribute_V1_QueryAttributesResponse>]

  /// - Returns: Interceptors to use when invoking 'scan'.
  func makeScanInterceptors() -> [ClientInterceptor<Provenance_Attribute_V1_QueryScanRequest, Provenance_Attribute_V1_QueryScanResponse>]
}

internal final class Provenance_Attribute_V1_QueryClient: Provenance_Attribute_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Provenance_Attribute_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the provenance.attribute.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Provenance_Attribute_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

