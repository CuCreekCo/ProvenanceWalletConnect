//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: provenance/metadata/v0/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the Metadata Msg service.
///
/// Usage: instantiate `Tx_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Tx_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Tx_MsgClientInterceptorFactoryProtocol? { get }

  func memorializeContract(
    _ request: Tx_MsgMemorializeContractRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tx_MsgMemorializeContractRequest, Tx_MemorializeContractResponse>

  func changeOwnership(
    _ request: Tx_MsgChangeOwnershipRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tx_MsgChangeOwnershipRequest, Tx_ChangeOwnershipResponse>
}

extension Tx_MsgClientProtocol {
  internal var serviceName: String {
    return "tx.Msg"
  }

  /// MemorializeContract records the results of a P8e contract execution as a record group and set of records in a scope
  ///
  /// - Parameters:
  ///   - request: Request to send to MemorializeContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func memorializeContract(
    _ request: Tx_MsgMemorializeContractRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tx_MsgMemorializeContractRequest, Tx_MemorializeContractResponse> {
    return self.makeUnaryCall(
      path: "/tx.Msg/MemorializeContract",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMemorializeContractInterceptors() ?? []
    )
  }

  /// ChangeOwnership allows P8e contracts to record a new set of owners on a scope
  ///
  /// - Parameters:
  ///   - request: Request to send to ChangeOwnership.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func changeOwnership(
    _ request: Tx_MsgChangeOwnershipRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tx_MsgChangeOwnershipRequest, Tx_ChangeOwnershipResponse> {
    return self.makeUnaryCall(
      path: "/tx.Msg/ChangeOwnership",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeOwnershipInterceptors() ?? []
    )
  }
}

internal protocol Tx_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'memorializeContract'.
  func makeMemorializeContractInterceptors() -> [ClientInterceptor<Tx_MsgMemorializeContractRequest, Tx_MemorializeContractResponse>]

  /// - Returns: Interceptors to use when invoking 'changeOwnership'.
  func makeChangeOwnershipInterceptors() -> [ClientInterceptor<Tx_MsgChangeOwnershipRequest, Tx_ChangeOwnershipResponse>]
}

internal final class Tx_MsgClient: Tx_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Tx_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the tx.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tx_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

