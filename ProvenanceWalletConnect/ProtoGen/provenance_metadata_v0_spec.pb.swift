// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: provenance/metadata/v0/spec.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Spec_DefinitionSpecType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case proposed // = 1
  case fact // = 2
  case factList // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .proposed
    case 2: self = .fact
    case 3: self = .factList
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .proposed: return 1
    case .fact: return 2
    case .factList: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Spec_DefinitionSpecType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Spec_DefinitionSpecType] = [
    .unknown,
    .proposed,
    .fact,
    .factList,
  ]
}

#endif  // swift(>=4.2)

struct Spec_DefinitionSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var resourceLocation: Types_Location {
    get {return _resourceLocation ?? Types_Location()}
    set {_resourceLocation = newValue}
  }
  /// Returns true if `resourceLocation` has been explicitly set.
  var hasResourceLocation: Bool {return self._resourceLocation != nil}
  /// Clears the value of `resourceLocation`. Subsequent reads from it will return its default value.
  mutating func clearResourceLocation() {self._resourceLocation = nil}

  var signature: Types_Signature {
    get {return _signature ?? Types_Signature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  mutating func clearSignature() {self._signature = nil}

  var type: Spec_DefinitionSpecType = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _resourceLocation: Types_Location? = nil
  fileprivate var _signature: Types_Signature? = nil
}

struct Spec_ContractSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var definition: Spec_DefinitionSpec {
    get {return _storage._definition ?? Spec_DefinitionSpec()}
    set {_uniqueStorage()._definition = newValue}
  }
  /// Returns true if `definition` has been explicitly set.
  var hasDefinition: Bool {return _storage._definition != nil}
  /// Clears the value of `definition`. Subsequent reads from it will return its default value.
  mutating func clearDefinition() {_uniqueStorage()._definition = nil}

  var inputSpecs: [Spec_DefinitionSpec] {
    get {return _storage._inputSpecs}
    set {_uniqueStorage()._inputSpecs = newValue}
  }

  var partiesInvolved: [Types_PartyType] {
    get {return _storage._partiesInvolved}
    set {_uniqueStorage()._partiesInvolved = newValue}
  }

  var conditionSpecs: [Spec_ConditionSpec] {
    get {return _storage._conditionSpecs}
    set {_uniqueStorage()._conditionSpecs = newValue}
  }

  var considerationSpecs: [Spec_ConsiderationSpec] {
    get {return _storage._considerationSpecs}
    set {_uniqueStorage()._considerationSpecs = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Spec_ConditionSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var funcName: String {
    get {return _storage._funcName}
    set {_uniqueStorage()._funcName = newValue}
  }

  var inputSpecs: [Spec_DefinitionSpec] {
    get {return _storage._inputSpecs}
    set {_uniqueStorage()._inputSpecs = newValue}
  }

  var outputSpec: Spec_OutputSpec {
    get {return _storage._outputSpec ?? Spec_OutputSpec()}
    set {_uniqueStorage()._outputSpec = newValue}
  }
  /// Returns true if `outputSpec` has been explicitly set.
  var hasOutputSpec: Bool {return _storage._outputSpec != nil}
  /// Clears the value of `outputSpec`. Subsequent reads from it will return its default value.
  mutating func clearOutputSpec() {_uniqueStorage()._outputSpec = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Spec_ConsiderationSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var funcName: String {
    get {return _storage._funcName}
    set {_uniqueStorage()._funcName = newValue}
  }

  /// Invoking party
  var responsibleParty: Types_PartyType {
    get {return _storage._responsibleParty}
    set {_uniqueStorage()._responsibleParty = newValue}
  }

  var inputSpecs: [Spec_DefinitionSpec] {
    get {return _storage._inputSpecs}
    set {_uniqueStorage()._inputSpecs = newValue}
  }

  var outputSpec: Spec_OutputSpec {
    get {return _storage._outputSpec ?? Spec_OutputSpec()}
    set {_uniqueStorage()._outputSpec = newValue}
  }
  /// Returns true if `outputSpec` has been explicitly set.
  var hasOutputSpec: Bool {return _storage._outputSpec != nil}
  /// Clears the value of `outputSpec`. Subsequent reads from it will return its default value.
  mutating func clearOutputSpec() {_uniqueStorage()._outputSpec = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Spec_OutputSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var spec: Spec_DefinitionSpec {
    get {return _spec ?? Spec_DefinitionSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {self._spec = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _spec: Spec_DefinitionSpec? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "spec"

extension Spec_DefinitionSpecType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFINITION_SPEC_TYPE_UNKNOWN"),
    1: .same(proto: "DEFINITION_SPEC_TYPE_PROPOSED"),
    2: .same(proto: "DEFINITION_SPEC_TYPE_FACT"),
    3: .same(proto: "DEFINITION_SPEC_TYPE_FACT_LIST"),
  ]
}

extension Spec_DefinitionSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DefinitionSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "resource_location"),
    3: .same(proto: "signature"),
    4: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._resourceLocation) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._resourceLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Spec_DefinitionSpec, rhs: Spec_DefinitionSpec) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._resourceLocation != rhs._resourceLocation {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spec_ContractSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "definition"),
    2: .standard(proto: "input_specs"),
    3: .standard(proto: "parties_involved"),
    4: .standard(proto: "condition_specs"),
    5: .standard(proto: "consideration_specs"),
  ]

  fileprivate class _StorageClass {
    var _definition: Spec_DefinitionSpec? = nil
    var _inputSpecs: [Spec_DefinitionSpec] = []
    var _partiesInvolved: [Types_PartyType] = []
    var _conditionSpecs: [Spec_ConditionSpec] = []
    var _considerationSpecs: [Spec_ConsiderationSpec] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _definition = source._definition
      _inputSpecs = source._inputSpecs
      _partiesInvolved = source._partiesInvolved
      _conditionSpecs = source._conditionSpecs
      _considerationSpecs = source._considerationSpecs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._definition) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._inputSpecs) }()
        case 3: try { try decoder.decodeRepeatedEnumField(value: &_storage._partiesInvolved) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._conditionSpecs) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._considerationSpecs) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._definition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._inputSpecs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inputSpecs, fieldNumber: 2)
      }
      if !_storage._partiesInvolved.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._partiesInvolved, fieldNumber: 3)
      }
      if !_storage._conditionSpecs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._conditionSpecs, fieldNumber: 4)
      }
      if !_storage._considerationSpecs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._considerationSpecs, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Spec_ContractSpec, rhs: Spec_ContractSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._definition != rhs_storage._definition {return false}
        if _storage._inputSpecs != rhs_storage._inputSpecs {return false}
        if _storage._partiesInvolved != rhs_storage._partiesInvolved {return false}
        if _storage._conditionSpecs != rhs_storage._conditionSpecs {return false}
        if _storage._considerationSpecs != rhs_storage._considerationSpecs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spec_ConditionSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConditionSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_name"),
    2: .standard(proto: "input_specs"),
    3: .standard(proto: "output_spec"),
  ]

  fileprivate class _StorageClass {
    var _funcName: String = String()
    var _inputSpecs: [Spec_DefinitionSpec] = []
    var _outputSpec: Spec_OutputSpec? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _funcName = source._funcName
      _inputSpecs = source._inputSpecs
      _outputSpec = source._outputSpec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._funcName) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._inputSpecs) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._outputSpec) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._funcName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._funcName, fieldNumber: 1)
      }
      if !_storage._inputSpecs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inputSpecs, fieldNumber: 2)
      }
      if let v = _storage._outputSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Spec_ConditionSpec, rhs: Spec_ConditionSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._funcName != rhs_storage._funcName {return false}
        if _storage._inputSpecs != rhs_storage._inputSpecs {return false}
        if _storage._outputSpec != rhs_storage._outputSpec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spec_ConsiderationSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsiderationSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_name"),
    2: .standard(proto: "responsible_party"),
    3: .standard(proto: "input_specs"),
    4: .standard(proto: "output_spec"),
  ]

  fileprivate class _StorageClass {
    var _funcName: String = String()
    var _responsibleParty: Types_PartyType = .unknown
    var _inputSpecs: [Spec_DefinitionSpec] = []
    var _outputSpec: Spec_OutputSpec? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _funcName = source._funcName
      _responsibleParty = source._responsibleParty
      _inputSpecs = source._inputSpecs
      _outputSpec = source._outputSpec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._funcName) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._responsibleParty) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._inputSpecs) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._outputSpec) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._funcName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._funcName, fieldNumber: 1)
      }
      if _storage._responsibleParty != .unknown {
        try visitor.visitSingularEnumField(value: _storage._responsibleParty, fieldNumber: 2)
      }
      if !_storage._inputSpecs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inputSpecs, fieldNumber: 3)
      }
      if let v = _storage._outputSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Spec_ConsiderationSpec, rhs: Spec_ConsiderationSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._funcName != rhs_storage._funcName {return false}
        if _storage._responsibleParty != rhs_storage._responsibleParty {return false}
        if _storage._inputSpecs != rhs_storage._inputSpecs {return false}
        if _storage._outputSpec != rhs_storage._outputSpec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spec_OutputSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OutputSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "spec"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Spec_OutputSpec, rhs: Spec_OutputSpec) -> Bool {
    if lhs._spec != rhs._spec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
